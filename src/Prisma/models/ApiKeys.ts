
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ApiKeys` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ApiKeys
 * 
 */
export type ApiKeysModel = runtime.Types.Result.DefaultSelection<Prisma.$ApiKeysPayload>

export type AggregateApiKeys = {
  _count: ApiKeysCountAggregateOutputType | null
  _avg: ApiKeysAvgAggregateOutputType | null
  _sum: ApiKeysSumAggregateOutputType | null
  _min: ApiKeysMinAggregateOutputType | null
  _max: ApiKeysMaxAggregateOutputType | null
}

export type ApiKeysAvgAggregateOutputType = {
  id: number | null
}

export type ApiKeysSumAggregateOutputType = {
  id: number | null
}

export type ApiKeysMinAggregateOutputType = {
  id: number | null
  name: string | null
  key: string | null
  permissions: string | null
}

export type ApiKeysMaxAggregateOutputType = {
  id: number | null
  name: string | null
  key: string | null
  permissions: string | null
}

export type ApiKeysCountAggregateOutputType = {
  id: number
  name: number
  key: number
  permissions: number
  _all: number
}


export type ApiKeysAvgAggregateInputType = {
  id?: true
}

export type ApiKeysSumAggregateInputType = {
  id?: true
}

export type ApiKeysMinAggregateInputType = {
  id?: true
  name?: true
  key?: true
  permissions?: true
}

export type ApiKeysMaxAggregateInputType = {
  id?: true
  name?: true
  key?: true
  permissions?: true
}

export type ApiKeysCountAggregateInputType = {
  id?: true
  name?: true
  key?: true
  permissions?: true
  _all?: true
}

export type ApiKeysAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ApiKeys to aggregate.
   */
  where?: Prisma.ApiKeysWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApiKeys to fetch.
   */
  orderBy?: Prisma.ApiKeysOrderByWithRelationInput | Prisma.ApiKeysOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ApiKeysWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApiKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApiKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ApiKeys
  **/
  _count?: true | ApiKeysCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ApiKeysAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ApiKeysSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ApiKeysMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ApiKeysMaxAggregateInputType
}

export type GetApiKeysAggregateType<T extends ApiKeysAggregateArgs> = {
      [P in keyof T & keyof AggregateApiKeys]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateApiKeys[P]>
    : Prisma.GetScalarType<T[P], AggregateApiKeys[P]>
}




export type ApiKeysGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApiKeysWhereInput
  orderBy?: Prisma.ApiKeysOrderByWithAggregationInput | Prisma.ApiKeysOrderByWithAggregationInput[]
  by: Prisma.ApiKeysScalarFieldEnum[] | Prisma.ApiKeysScalarFieldEnum
  having?: Prisma.ApiKeysScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ApiKeysCountAggregateInputType | true
  _avg?: ApiKeysAvgAggregateInputType
  _sum?: ApiKeysSumAggregateInputType
  _min?: ApiKeysMinAggregateInputType
  _max?: ApiKeysMaxAggregateInputType
}

export type ApiKeysGroupByOutputType = {
  id: number
  name: string
  key: string
  permissions: string
  _count: ApiKeysCountAggregateOutputType | null
  _avg: ApiKeysAvgAggregateOutputType | null
  _sum: ApiKeysSumAggregateOutputType | null
  _min: ApiKeysMinAggregateOutputType | null
  _max: ApiKeysMaxAggregateOutputType | null
}

type GetApiKeysGroupByPayload<T extends ApiKeysGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ApiKeysGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ApiKeysGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ApiKeysGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ApiKeysGroupByOutputType[P]>
      }
    >
  >



export type ApiKeysWhereInput = {
  AND?: Prisma.ApiKeysWhereInput | Prisma.ApiKeysWhereInput[]
  OR?: Prisma.ApiKeysWhereInput[]
  NOT?: Prisma.ApiKeysWhereInput | Prisma.ApiKeysWhereInput[]
  id?: Prisma.IntFilter<"ApiKeys"> | number
  name?: Prisma.StringFilter<"ApiKeys"> | string
  key?: Prisma.StringFilter<"ApiKeys"> | string
  permissions?: Prisma.StringFilter<"ApiKeys"> | string
}

export type ApiKeysOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  permissions?: Prisma.SortOrder
  _relevance?: Prisma.ApiKeysOrderByRelevanceInput
}

export type ApiKeysWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  key?: string
  AND?: Prisma.ApiKeysWhereInput | Prisma.ApiKeysWhereInput[]
  OR?: Prisma.ApiKeysWhereInput[]
  NOT?: Prisma.ApiKeysWhereInput | Prisma.ApiKeysWhereInput[]
  name?: Prisma.StringFilter<"ApiKeys"> | string
  permissions?: Prisma.StringFilter<"ApiKeys"> | string
}, "id" | "key">

export type ApiKeysOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  permissions?: Prisma.SortOrder
  _count?: Prisma.ApiKeysCountOrderByAggregateInput
  _avg?: Prisma.ApiKeysAvgOrderByAggregateInput
  _max?: Prisma.ApiKeysMaxOrderByAggregateInput
  _min?: Prisma.ApiKeysMinOrderByAggregateInput
  _sum?: Prisma.ApiKeysSumOrderByAggregateInput
}

export type ApiKeysScalarWhereWithAggregatesInput = {
  AND?: Prisma.ApiKeysScalarWhereWithAggregatesInput | Prisma.ApiKeysScalarWhereWithAggregatesInput[]
  OR?: Prisma.ApiKeysScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ApiKeysScalarWhereWithAggregatesInput | Prisma.ApiKeysScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ApiKeys"> | number
  name?: Prisma.StringWithAggregatesFilter<"ApiKeys"> | string
  key?: Prisma.StringWithAggregatesFilter<"ApiKeys"> | string
  permissions?: Prisma.StringWithAggregatesFilter<"ApiKeys"> | string
}

export type ApiKeysCreateInput = {
  name: string
  key: string
  permissions: string
}

export type ApiKeysUncheckedCreateInput = {
  id?: number
  name: string
  key: string
  permissions: string
}

export type ApiKeysUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  permissions?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ApiKeysUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  permissions?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ApiKeysCreateManyInput = {
  id?: number
  name: string
  key: string
  permissions: string
}

export type ApiKeysUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  permissions?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ApiKeysUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  permissions?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ApiKeysOrderByRelevanceInput = {
  fields: Prisma.ApiKeysOrderByRelevanceFieldEnum | Prisma.ApiKeysOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ApiKeysCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  permissions?: Prisma.SortOrder
}

export type ApiKeysAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ApiKeysMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  permissions?: Prisma.SortOrder
}

export type ApiKeysMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  key?: Prisma.SortOrder
  permissions?: Prisma.SortOrder
}

export type ApiKeysSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type ApiKeysSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  key?: boolean
  permissions?: boolean
}, ExtArgs["result"]["apiKeys"]>



export type ApiKeysSelectScalar = {
  id?: boolean
  name?: boolean
  key?: boolean
  permissions?: boolean
}

export type ApiKeysOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "key" | "permissions", ExtArgs["result"]["apiKeys"]>

export type $ApiKeysPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ApiKeys"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    key: string
    permissions: string
  }, ExtArgs["result"]["apiKeys"]>
  composites: {}
}

export type ApiKeysGetPayload<S extends boolean | null | undefined | ApiKeysDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload, S>

export type ApiKeysCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ApiKeysFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ApiKeysCountAggregateInputType | true
  }

export interface ApiKeysDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiKeys'], meta: { name: 'ApiKeys' } }
  /**
   * Find zero or one ApiKeys that matches the filter.
   * @param {ApiKeysFindUniqueArgs} args - Arguments to find a ApiKeys
   * @example
   * // Get one ApiKeys
   * const apiKeys = await prisma.apiKeys.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ApiKeysFindUniqueArgs>(args: Prisma.SelectSubset<T, ApiKeysFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ApiKeysClient<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ApiKeys that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ApiKeysFindUniqueOrThrowArgs} args - Arguments to find a ApiKeys
   * @example
   * // Get one ApiKeys
   * const apiKeys = await prisma.apiKeys.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ApiKeysFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ApiKeysFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApiKeysClient<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ApiKeys that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiKeysFindFirstArgs} args - Arguments to find a ApiKeys
   * @example
   * // Get one ApiKeys
   * const apiKeys = await prisma.apiKeys.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ApiKeysFindFirstArgs>(args?: Prisma.SelectSubset<T, ApiKeysFindFirstArgs<ExtArgs>>): Prisma.Prisma__ApiKeysClient<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ApiKeys that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiKeysFindFirstOrThrowArgs} args - Arguments to find a ApiKeys
   * @example
   * // Get one ApiKeys
   * const apiKeys = await prisma.apiKeys.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ApiKeysFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ApiKeysFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApiKeysClient<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ApiKeys that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiKeysFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ApiKeys
   * const apiKeys = await prisma.apiKeys.findMany()
   * 
   * // Get first 10 ApiKeys
   * const apiKeys = await prisma.apiKeys.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const apiKeysWithIdOnly = await prisma.apiKeys.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ApiKeysFindManyArgs>(args?: Prisma.SelectSubset<T, ApiKeysFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ApiKeys.
   * @param {ApiKeysCreateArgs} args - Arguments to create a ApiKeys.
   * @example
   * // Create one ApiKeys
   * const ApiKeys = await prisma.apiKeys.create({
   *   data: {
   *     // ... data to create a ApiKeys
   *   }
   * })
   * 
   */
  create<T extends ApiKeysCreateArgs>(args: Prisma.SelectSubset<T, ApiKeysCreateArgs<ExtArgs>>): Prisma.Prisma__ApiKeysClient<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ApiKeys.
   * @param {ApiKeysCreateManyArgs} args - Arguments to create many ApiKeys.
   * @example
   * // Create many ApiKeys
   * const apiKeys = await prisma.apiKeys.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ApiKeysCreateManyArgs>(args?: Prisma.SelectSubset<T, ApiKeysCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ApiKeys.
   * @param {ApiKeysDeleteArgs} args - Arguments to delete one ApiKeys.
   * @example
   * // Delete one ApiKeys
   * const ApiKeys = await prisma.apiKeys.delete({
   *   where: {
   *     // ... filter to delete one ApiKeys
   *   }
   * })
   * 
   */
  delete<T extends ApiKeysDeleteArgs>(args: Prisma.SelectSubset<T, ApiKeysDeleteArgs<ExtArgs>>): Prisma.Prisma__ApiKeysClient<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ApiKeys.
   * @param {ApiKeysUpdateArgs} args - Arguments to update one ApiKeys.
   * @example
   * // Update one ApiKeys
   * const apiKeys = await prisma.apiKeys.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ApiKeysUpdateArgs>(args: Prisma.SelectSubset<T, ApiKeysUpdateArgs<ExtArgs>>): Prisma.Prisma__ApiKeysClient<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ApiKeys.
   * @param {ApiKeysDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
   * @example
   * // Delete a few ApiKeys
   * const { count } = await prisma.apiKeys.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ApiKeysDeleteManyArgs>(args?: Prisma.SelectSubset<T, ApiKeysDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ApiKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiKeysUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ApiKeys
   * const apiKeys = await prisma.apiKeys.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ApiKeysUpdateManyArgs>(args: Prisma.SelectSubset<T, ApiKeysUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ApiKeys.
   * @param {ApiKeysUpsertArgs} args - Arguments to update or create a ApiKeys.
   * @example
   * // Update or create a ApiKeys
   * const apiKeys = await prisma.apiKeys.upsert({
   *   create: {
   *     // ... data to create a ApiKeys
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ApiKeys we want to update
   *   }
   * })
   */
  upsert<T extends ApiKeysUpsertArgs>(args: Prisma.SelectSubset<T, ApiKeysUpsertArgs<ExtArgs>>): Prisma.Prisma__ApiKeysClient<runtime.Types.Result.GetResult<Prisma.$ApiKeysPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ApiKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiKeysCountArgs} args - Arguments to filter ApiKeys to count.
   * @example
   * // Count the number of ApiKeys
   * const count = await prisma.apiKeys.count({
   *   where: {
   *     // ... the filter for the ApiKeys we want to count
   *   }
   * })
  **/
  count<T extends ApiKeysCountArgs>(
    args?: Prisma.Subset<T, ApiKeysCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ApiKeysCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ApiKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiKeysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ApiKeysAggregateArgs>(args: Prisma.Subset<T, ApiKeysAggregateArgs>): Prisma.PrismaPromise<GetApiKeysAggregateType<T>>

  /**
   * Group by ApiKeys.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiKeysGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ApiKeysGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ApiKeysGroupByArgs['orderBy'] }
      : { orderBy?: ApiKeysGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ApiKeysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ApiKeys model
 */
readonly fields: ApiKeysFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ApiKeys.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ApiKeysClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ApiKeys model
 */
export interface ApiKeysFieldRefs {
  readonly id: Prisma.FieldRef<"ApiKeys", 'Int'>
  readonly name: Prisma.FieldRef<"ApiKeys", 'String'>
  readonly key: Prisma.FieldRef<"ApiKeys", 'String'>
  readonly permissions: Prisma.FieldRef<"ApiKeys", 'String'>
}
    

// Custom InputTypes
/**
 * ApiKeys findUnique
 */
export type ApiKeysFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * Filter, which ApiKeys to fetch.
   */
  where: Prisma.ApiKeysWhereUniqueInput
}

/**
 * ApiKeys findUniqueOrThrow
 */
export type ApiKeysFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * Filter, which ApiKeys to fetch.
   */
  where: Prisma.ApiKeysWhereUniqueInput
}

/**
 * ApiKeys findFirst
 */
export type ApiKeysFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * Filter, which ApiKeys to fetch.
   */
  where?: Prisma.ApiKeysWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApiKeys to fetch.
   */
  orderBy?: Prisma.ApiKeysOrderByWithRelationInput | Prisma.ApiKeysOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ApiKeys.
   */
  cursor?: Prisma.ApiKeysWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApiKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApiKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ApiKeys.
   */
  distinct?: Prisma.ApiKeysScalarFieldEnum | Prisma.ApiKeysScalarFieldEnum[]
}

/**
 * ApiKeys findFirstOrThrow
 */
export type ApiKeysFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * Filter, which ApiKeys to fetch.
   */
  where?: Prisma.ApiKeysWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApiKeys to fetch.
   */
  orderBy?: Prisma.ApiKeysOrderByWithRelationInput | Prisma.ApiKeysOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ApiKeys.
   */
  cursor?: Prisma.ApiKeysWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApiKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApiKeys.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ApiKeys.
   */
  distinct?: Prisma.ApiKeysScalarFieldEnum | Prisma.ApiKeysScalarFieldEnum[]
}

/**
 * ApiKeys findMany
 */
export type ApiKeysFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * Filter, which ApiKeys to fetch.
   */
  where?: Prisma.ApiKeysWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApiKeys to fetch.
   */
  orderBy?: Prisma.ApiKeysOrderByWithRelationInput | Prisma.ApiKeysOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ApiKeys.
   */
  cursor?: Prisma.ApiKeysWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApiKeys from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApiKeys.
   */
  skip?: number
  distinct?: Prisma.ApiKeysScalarFieldEnum | Prisma.ApiKeysScalarFieldEnum[]
}

/**
 * ApiKeys create
 */
export type ApiKeysCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * The data needed to create a ApiKeys.
   */
  data: Prisma.XOR<Prisma.ApiKeysCreateInput, Prisma.ApiKeysUncheckedCreateInput>
}

/**
 * ApiKeys createMany
 */
export type ApiKeysCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ApiKeys.
   */
  data: Prisma.ApiKeysCreateManyInput | Prisma.ApiKeysCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ApiKeys update
 */
export type ApiKeysUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * The data needed to update a ApiKeys.
   */
  data: Prisma.XOR<Prisma.ApiKeysUpdateInput, Prisma.ApiKeysUncheckedUpdateInput>
  /**
   * Choose, which ApiKeys to update.
   */
  where: Prisma.ApiKeysWhereUniqueInput
}

/**
 * ApiKeys updateMany
 */
export type ApiKeysUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ApiKeys.
   */
  data: Prisma.XOR<Prisma.ApiKeysUpdateManyMutationInput, Prisma.ApiKeysUncheckedUpdateManyInput>
  /**
   * Filter which ApiKeys to update
   */
  where?: Prisma.ApiKeysWhereInput
  /**
   * Limit how many ApiKeys to update.
   */
  limit?: number
}

/**
 * ApiKeys upsert
 */
export type ApiKeysUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * The filter to search for the ApiKeys to update in case it exists.
   */
  where: Prisma.ApiKeysWhereUniqueInput
  /**
   * In case the ApiKeys found by the `where` argument doesn't exist, create a new ApiKeys with this data.
   */
  create: Prisma.XOR<Prisma.ApiKeysCreateInput, Prisma.ApiKeysUncheckedCreateInput>
  /**
   * In case the ApiKeys was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ApiKeysUpdateInput, Prisma.ApiKeysUncheckedUpdateInput>
}

/**
 * ApiKeys delete
 */
export type ApiKeysDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
  /**
   * Filter which ApiKeys to delete.
   */
  where: Prisma.ApiKeysWhereUniqueInput
}

/**
 * ApiKeys deleteMany
 */
export type ApiKeysDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ApiKeys to delete
   */
  where?: Prisma.ApiKeysWhereInput
  /**
   * Limit how many ApiKeys to delete.
   */
  limit?: number
}

/**
 * ApiKeys without action
 */
export type ApiKeysDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKeys
   */
  select?: Prisma.ApiKeysSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKeys
   */
  omit?: Prisma.ApiKeysOmit<ExtArgs> | null
}
